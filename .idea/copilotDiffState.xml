<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="&lt;img width=&quot;3000&quot; height=&quot;1454&quot; alt=&quot;# react-native-cross-elements&quot;&#10;src=&quot;https://github.com/user-attachments/assets/9520856e-b059-4e1d-b5f9-0a3ef229700c&quot;/&gt;&#10;&#10;Beautiful, Web, Native and TV friendly interactable components and spatial navigation for React Native (iOS, Android,&#10;Web, TV) with accessibility for voice and screen reader support.&#10;&#10;[![npm version](https://img.shields.io/npm/v/react-native-cross-elements.svg?style=for-the-badge)](https://www.npmjs.com/package/react-native-cross-elements)&#10;[![npm downloads](https://img.shields.io/npm/dm/react-native-cross-elements.svg?style=for-the-badge&amp;color=blue)](https://www.npmjs.com/package/react-native-cross-elements)&#10;![TypeScript](https://img.shields.io/badge/TypeScript-Ready-3178C6?style=for-the-badge&amp;logo=typescript&amp;logoColor=white)&#10;![Reanimated](https://img.shields.io/badge/Reanimated-%E2%89%A53.0-000?style=for-the-badge)&#10;&#10;---&#10;&#10;## ✨ Features&#10;&#10;- Cross Platform Ready interactable UI: Buttons (native/custom), Switch, Dropdown, FlatLabelInput, Ripple, Portal.&#10;- Spatial navigation primitives: Root, Focusable views, ScrollView, Virtualized List/Grid, hooks, and refs.&#10;- Cross-platform pointer/remote support powered by @bam.tech/lrud for LRUD navigation and React Native Reanimated for&#10;  silky animations.&#10;&#10;## ️ Table of contents&#10;&#10;- Installation&#10;- Requirements&#10;- Quick start&#10;- Spatial navigation overview&#10;- Components&#10;- Usage snippets&#10;- API and types reference&#10;- Recipes&#10;- Contributing and license&#10;&#10;##  Installation&#10;&#10;1) Install the package and required peers&#10;&#10;```bash&#10;# with npm&#10;npm i react-native-cross-elements&#10;&#10;# or yarn&#10;yarn add react-native-cross-elements&#10;```&#10;&#10;#### 2) Configure Reanimated (v3.0+)&#10;&#10;Follow the official Reanimated installation guide for your RN version:&#10;&#10;- React Native Reanimated docs: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/&#10;&#10;Typical steps include:&#10;&#10;- Add 'react-native-reanimated/plugin' as the last plugin in babel.config.js.&#10;- Enable Hermes (recommended).&#10;- Rebuild the native app after installing.&#10;&#10;#### 3) iOS/Android native rebuild&#10;&#10;After installation and Babel config, fully rebuild the app (npx pod-install &amp;&amp; run).&#10;&#10;## ⚙️ Requirements&#10;&#10;- react-native&#10;- react&#10;- react-native-reanimated &gt;= 3.0.0 (installation&#10;  guide: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started#installation)&#10;&#10;##  Components&#10;&#10;- Buttons&#10;    - NativeButton, CustomButton, BaseButton&#10;    - ButtonsSlider, AutoDetectButtonsSlider&#10;    - Switch&#10;- Inputs&#10;    - FlatLabelInput, LabeledInputFieldWeb&#10;    - Dropdown&#10;- Effects &amp; Portal&#10;    - Ripple, Portal, PortalHost&#10;- Navigation primitives&#10;    - SpatialNavigationRoot, SpatialNavigationView, SpatialNavigationScrollView&#10;    - SpatialNavigationFocusableView, SpatialNavigationNode&#10;    - SpatialNavigationVirtualizedList, SpatialNavigationVirtualizedGrid&#10;    - DefaultFocus, DeviceType provider, hooks&#10;&#10;## ⚡ Setup Spatial Navigation&#10;&#10;&lt;span style=&quot;color:green&quot;&gt;This setup is optional if you want to use spatial navigation (TV, remote, keyboard).  &#10;Otherwise, no need to wrap your app in a SpatialNavigationRoot.&lt;/span&gt;&#10;&#10;Wrap your app in a SpatialNavigationRoot and use Focusable views and components. Pointer devices can auto-focus elements&#10;on hover; remote arrow keys navigate.&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text} from 'react-native';&#10;import {&#10;&#9;SpatialNavigationDeviceTypeProvider,&#10;&#9;SpatialNavigationRoot,&#10;&#9;SpatialNavigationFocusableView,&#10;&#9;SpatialNavigationView,&#10;&#9;SpatialNavigation,&#10;} from 'react-native-elements';&#10;&#10;export default function App() {&#10;&#9;// Optional: wire up keyboard/remote once&#10;&#9;React.useEffect(() =&gt; {&#10;&#9;&#9;SpatialNavigation.configureRemoteControl();&#10;&#9;}, []);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;SpatialNavigationDeviceTypeProvider&gt;&#10;&#9;&#9;&#9;&lt;SpatialNavigationRoot&gt;&#10;&#9;&#9;&#9;&#9;&lt;SpatialNavigationFocusableView style={{padding: 12, backgroundColor: '#222', borderRadius: 8}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;Focusable card&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&lt;/SpatialNavigationFocusableView&gt;&#10;&#9;&#9;&#9;&lt;/SpatialNavigationRoot&gt;&#10;&#9;&#9;&lt;/SpatialNavigationDeviceTypeProvider&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;##  Spatial navigation&#10;&#10;- Engine: LRUD navigation is powered by @bam.tech/lrud.&#10;- Root: SpatialNavigationRoot provides the navigation context and remote handling.&#10;- Focusable: SpatialNavigationFocusableView turns a View into a focusable node with proper accessibility props.&#10;- Views: SpatialNavigationView and SpatialNavigationScrollView help layout focusable children, with scrolling support.&#10;- Virtualized: SpatialNavigationVirtualizedList/Grid expose focus and scroll APIs via refs.&#10;- Events: onFocus, onBlur, onSelect, onLongSelect, onActive, onInactive handlers are available on focusable nodes.&#10;&#10;More in-depth spatial navigation concepts:&#10;&#10;- LRUD docs (BAM): https://github.com/bam-tech/lrud&#10;- React TV Space Navigation (Bamlab): https://github.com/bamlab/react-tv-space-navigation&#10;&#10;##  Usage snippets&#10;&#10;### Dropdown&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text, View} from 'react-native';&#10;import {Dropdown, type SelectDropdownProps, type SelectDropdownRef} from 'react-native-elements';&#10;&#10;const options = [&#10;&#9;{label: 'One', value: 1},&#10;&#9;{label: 'Two', value: 2},&#10;&#9;{label: 'Three', value: 3},&#10;&#9;{label: 'Four', value: 4},&#10;];&#10;&#10;export default function MyDropdown() {&#10;&#9;const ref = React.useRef&lt;SelectDropdownRef&gt;(null);&#10;&#10;&#9;const onSelect: SelectDropdownProps&lt;typeof options[number]&gt;['onSelect'] = (item, index) =&gt; {&#10;&#9;&#9;console.log('selected', {item, index});&#10;&#9;};&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{gap: 12}}&gt;&#10;&#9;&#9;&#9;&lt;Dropdown&#10;&#9;&#9;&#9;&#9;ref={ref}&#10;&#9;&#9;&#9;&#9;data={options}&#10;&#9;&#9;&#9;&#9;defaultValueByIndex={1}&#10;&#9;&#9;&#9;&#9;disabledIndexes={[2]}&#10;&#9;&#9;&#9;&#9;onSelect={onSelect}&#10;&#9;&#9;&#9;&#9;onDropdownWillShow={(willShow) =&gt; console.log('dropdown will show?', willShow)}&#10;&#9;&#9;&#9;&#9;// Animations&#10;&#9;&#9;&#9;&#9;animateDropdown&#10;&#9;&#9;&#9;&#9;animationType={'spring'}&#10;&#9;&#9;&#9;&#9;animationConfig={{duration: 280}}&#10;&#9;&#9;&#9;&#9;// Search&#10;&#9;&#9;&#9;&#9;search&#10;&#9;&#9;&#9;&#9;searchPlaceHolder=&quot;Search options...&quot;&#10;&#9;&#9;&#9;&#9;renderSearchInputLeftIcon={() =&gt; &lt;Text&gt;&lt;/Text&gt;}&#10;&#9;&#9;&#9;&#9;// Window &amp; overlay&#10;&#9;&#9;&#9;&#9;dropDownSpacing={8}&#10;&#9;&#9;&#9;&#9;dropdownOverlayColor=&quot;rgba(0,0,0,0.45)&quot;&#10;&#9;&#9;&#9;&#9;showsVerticalScrollIndicator={false}&#10;&#9;&#9;&#9;&#9;// Custom UI&#10;&#9;&#9;&#9;&#9;renderButtonContent={(selectedItem, isVisible, focused) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{padding: 12, borderRadius: 8, backgroundColor: focused ? '#222' : '#333'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{selectedItem ? selectedItem.label : 'Select an option'} {isVisible ? '▲' : '▼'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;renderItemContent={(item, index, isSelected) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{padding: 12, backgroundColor: isSelected ? '#222' : 'transparent'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;{index + 1}. {item.label}&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;/&gt;&#10;&#10;&#9;&#9;&#9;&lt;Text onPress={() =&gt; ref.current?.openDropdown()} style={{color: '#4EA8DE'}}&gt;Open programmatically&lt;/Text&gt;&#10;&#9;&#9;&#9;&lt;Text onPress={() =&gt; ref.current?.selectIndex(0)} style={{color: '#4EA8DE'}}&gt;Select first option&lt;/Text&gt;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;### Switch&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Switch} from 'react-native-cross-elements';&#10;&#10;export default function MySwitch() {&#10;&#9;const [on, setOn] = React.useState(false);&#10;&#9;return &lt;Switch value={on} onValueChange={setOn}/&gt;;&#10;}&#10;```&#10;&#10;### FlatLabelInput&#10;&#10;```tsx&#10;import React from 'react';&#10;import {FlatLabelInput} from 'react-native-cross-elements';&#10;import {Text} from 'react-native';&#10;&#10;export default function MyInput() {&#10;&#9;const [text, setText] = React.useState('');&#10;&#9;const [focused, setFocused] = React.useState(false);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;FlatLabelInput&#10;&#9;&#9;&#9;onChange={setText}&#10;&#9;&#9;&#9;// Visuals&#10;&#9;&#9;&#9;textColor=&quot;#E5E7EB&quot;&#10;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;backgroundColor=&quot;#111827&quot;&#10;&#9;&#9;&#9;selectedBackgroundColor=&quot;#1F2937&quot;&#10;&#9;&#9;&#9;pressedBackgroundColor=&quot;#0B1220&quot;&#10;&#9;&#9;&#9;labelStyle={{&#10;&#9;&#9;&#9;&#9;labelFilledColor: '#9CA3AF',&#10;&#9;&#9;&#9;&#9;labelFilledFontSize: 12,&#10;&#9;&#9;&#9;&#9;color: '#9CA3AF',&#10;&#9;&#9;&#9;&#9;fontSize: 16,&#10;&#9;&#9;&#9;&#9;fontWeight: '600',&#10;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;inputConfig={{&#10;&#9;&#9;&#9;&#9;placeholder: 'Email',&#10;&#9;&#9;&#9;&#9;inputMode: 'email',&#10;&#9;&#9;&#9;&#9;maxLength: 120,&#10;&#9;&#9;&#9;&#9;autoFocus: false,&#10;&#9;&#9;&#9;&#9;secureTextEntry: false,&#10;&#9;&#9;&#9;&#9;onEndEditing: () =&gt; console.log('end editing'),&#10;&#9;&#9;&#9;&#9;className: 'my-input',&#10;&#9;&#9;&#9;&#9;placeholderClassName: 'my-input-placeholder',&#10;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;leftComponent={(state) =&gt; (&#10;&#9;&#9;&#9;&#9;&lt;Text style={{marginRight: 8}}&gt;{state.focused ? '✉️' : ''}&lt;/Text&gt;&#10;&#9;&#9;&#9;)}&#10;&#9;&#9;/&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;### Buttons (Base, Native, Custom, Sliders)&#10;&#10;```tsx&#10;import React from 'react';&#10;import {&#10;&#9;BaseButton,&#10;&#9;NativeButton,&#10;&#9;CustomButton,&#10;&#9;ButtonSlider,&#10;&#9;AutoDetectButtonsSlider,&#10;} from 'react-native-cross-elements';&#10;import {Text, View} from 'react-native';&#10;&#10;export default function ButtonsShowcase() {&#10;&#9;const [choice, setChoice] = React.useState(0);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{gap: 16}}&gt;&#10;&#9;&#9;&#9;{/* BaseButton: full control with render-prop */}&#10;&#9;&#9;&#9;&lt;BaseButton&#10;&#9;&#9;&#9;&#9;enableRipple&#10;&#9;&#9;&#9;&#9;rippleDuration={350}&#10;&#9;&#9;&#9;&#9;pressedScale={0.96}&#10;&#9;&#9;&#9;&#9;backgroundColor=&quot;#111827&quot;&#10;&#9;&#9;&#9;&#9;selectedBackgroundColor=&quot;#1F2937&quot;&#10;&#9;&#9;&#9;&#9;pressedBackgroundColor=&quot;#0B1220&quot;&#10;&#9;&#9;&#9;&#9;textColor=&quot;#E5E7EB&quot;&#10;&#9;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;&#9;animationConfig={{duration: 220}}&#10;&#9;&#9;&#9;&#9;style={({focused, pressed}) =&gt; ([&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingHorizontal: 16,&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingVertical: 12,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderRadius: 12,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderWidth: focused ? 2 : 1,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderColor: focused ? '#60A5FA' : 'transparent',&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;])}&#10;&#9;&#9;&#9;&#9;onPress={() =&gt; console.log('BaseButton pressed')}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;{({currentTextColor, isFocused}) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: currentTextColor}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{isFocused ? 'Focused' : 'Not focused'} BaseButton&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&lt;/BaseButton&gt;&#10;&#10;&#9;&#9;&#9;{/* NativeButton: text + optional icons + pending indicator */}&#10;&#9;&#9;&#9;&lt;NativeButton&#10;&#9;&#9;&#9;&#9;text=&quot;Continue&quot;&#10;&#9;&#9;&#9;&#9;onPress={async () =&gt; new Promise(r =&gt; setTimeout(r, 500))}&#10;&#9;&#9;&#9;&#9;showIndicator&#10;&#9;&#9;&#9;&#9;leftIconComponent={(color) =&gt; &lt;Text style={{color, marginRight: 8}}&gt;➡️&lt;/Text&gt;}&#10;&#9;&#9;&#9;&#9;rightIconComponent={(color) =&gt; &lt;Text style={{color, marginLeft: 8}}&gt;⏩&lt;/Text&gt;}&#10;&#9;&#9;&#9;&#9;backgroundColor=&quot;#0F766E&quot;&#10;&#9;&#9;&#9;&#9;selectedBackgroundColor=&quot;#115E59&quot;&#10;&#9;&#9;&#9;&#9;pressedBackgroundColor=&quot;#0D4D4A&quot;&#10;&#9;&#9;&#9;&#9;textColor=&quot;#ECFDF5&quot;&#10;&#9;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;&#9;style={{paddingHorizontal: 16, paddingVertical: 12, borderRadius: 12}}&#10;&#9;&#9;&#9;/&gt;&#10;&#10;&#9;&#9;&#9;{/* CustomButton: bring your own content with pending state */}&#10;&#9;&#9;&#9;&lt;CustomButton&#10;&#9;&#9;&#9;&#9;onPress={async () =&gt; new Promise(r =&gt; setTimeout(r, 400))}&#10;&#9;&#9;&#9;&#9;showIndicator&#10;&#9;&#9;&#9;&#9;backgroundColor=&quot;#1D4ED8&quot;&#10;&#9;&#9;&#9;&#9;selectedBackgroundColor=&quot;#1E40AF&quot;&#10;&#9;&#9;&#9;&#9;pressedBackgroundColor=&quot;#1C3D99&quot;&#10;&#9;&#9;&#9;&#9;textColor=&quot;#DBEAFE&quot;&#10;&#9;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;&#9;style={{paddingHorizontal: 16, paddingVertical: 12, borderRadius: 12}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;{({currentTextColor}) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{flexDirection: 'row', alignItems: 'center', gap: 8}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: currentTextColor}}&gt;Custom content&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: currentTextColor}}&gt;&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&lt;/CustomButton&gt;&#10;&#10;&#9;&#9;&#9;{/* ButtonSlider: fixed orientation */}&#10;&#9;&#9;&#9;&lt;ButtonSlider&#10;&#9;&#9;&#9;&#9;options={[&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;]}&#10;&#9;&#9;&#9;&#9;initialIndex={choice}&#10;&#9;&#9;&#9;&#9;onSelect={(i) =&gt; setChoice(i)}&#10;&#9;&#9;&#9;&#9;orientation=&quot;horizontal&quot;&#10;&#9;&#9;&#9;&#9;sliderContainerStyle={{backgroundColor: '#00000022', borderRadius: 9999, padding: 4}}&#10;&#9;&#9;&#9;&#9;sliderStyle={{backgroundColor: '#111827'}}&#10;&#9;&#9;&#9;&#9;sliderItemButtonStyle={({focused}) =&gt; ({&#10;&#9;&#9;&#9;&#9;&#9;backgroundColor: 'transparent',&#10;&#9;&#9;&#9;&#9;})}&#10;&#9;&#9;&#9;&#9;sliderItemTextStyle={({focused}) =&gt; ({&#10;&#9;&#9;&#9;&#9;&#9;color: focused ? '#111827' : '#111827',&#10;&#9;&#9;&#9;&#9;&#9;fontWeight: focused ? '700' : '500',&#10;&#9;&#9;&#9;&#9;})}&#10;&#9;&#9;&#9;&#9;textProps={{numberOfLines: 1}}&#10;&#9;&#9;&#9;&#9;style={{width: 420, height: 44}}&#10;&#9;&#9;&#9;/&gt;&#10;&#10;&#9;&#9;&#9;{/* AutoDetectButtonsSlider: auto horizontal/vertical based on container */}&#10;&#9;&#9;&#9;&lt;AutoDetectButtonsSlider&#10;&#9;&#9;&#9;&#9;options={[&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;]}&#10;&#9;&#9;&#9;&#9;initialIndex={0}&#10;&#9;&#9;&#9;&#9;onSelect={(i) =&gt; console.log('auto slider selected', i)}&#10;&#9;&#9;&#9;&#9;sliderContainerStyle={{backgroundColor: '#00000022', borderRadius: 9999, padding: 4}}&#10;&#9;&#9;&#9;&#9;sliderStyle={{backgroundColor: '#111827'}}&#10;&#9;&#9;&#9;&#9;sliderItemButtonStyle={{backgroundColor: 'transparent'}}&#10;&#9;&#9;&#9;&#9;sliderItemTextStyle={{color: '#111827', fontWeight: '600'}}&#10;&#9;&#9;&#9;&#9;textProps={{numberOfLines: 1}}&#10;&#9;&#9;&#9;&#9;style={{width: 420, height: 44}}&#10;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;### Portal &amp; PortalHost&#10;&#10;Use a PortalHost to render UI outside the normal view hierarchy. It's perfect for overlays that must escape clipping (&#10;overflow: hidden) or stack above everything (modals, dropdowns, tooltips, toasts).&#10;&#10;#### How it works&#10;&#10;- PortalHost subscribes to a central registry and renders any mounted portals into an absolute, top-layer container (&#10;  zIndex 1000, pointerEvents: 'none').&#10;- Portal registers its children into the named host on mount and removes them on unmount.&#10;- Components like Dropdown auto-detect a PortalHost; if none is mounted, they fall back to a native modal.&#10;&#10;#### Setup (root)&#10;&#10;```tsx&#10;import React from 'react';&#10;import {View} from 'react-native';&#10;import {PortalHost} from 'react-native-cross-elements';&#10;&#10;export default function RootLayout() {&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{flex: 1}}&gt;&#10;&#9;&#9;&#9;{/* Top-level host. Name is optional; default is 'root_ui_portal'. */}&#10;&#9;&#9;&#9;&lt;PortalHost/&gt;&#10;&#9;&#9;&#9;{/* Your app screens */}&#10;&#9;&#9;&#9;{/* &lt;AppNavigator /&gt; */}&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;#### Example: global toast&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text, View} from 'react-native';&#10;import {Portal} from 'react-native-cross-elements';&#10;&#10;export function ToastDemo() {&#10;&#9;const [toast, setToast] = React.useState&lt;string | null&gt;(null);&#10;&#10;&#9;React.useEffect(() =&gt; {&#10;&#9;&#9;const t = setInterval(() =&gt; setToast('Saved successfully ✅'), 5000);&#10;&#9;&#9;const c = setInterval(() =&gt; setToast(null), 6500);&#10;&#9;&#9;return () =&gt; {&#10;&#9;&#9;&#9;clearInterval(t);&#10;&#9;&#9;&#9;clearInterval(c);&#10;&#9;&#9;};&#10;&#9;}, []);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;Portal&gt;&#10;&#9;&#9;&#9;{toast &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&lt;View&#10;&#9;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;&#9;position: 'absolute',&#10;&#9;&#9;&#9;&#9;&#9;&#9;bottom: 24,&#10;&#9;&#9;&#9;&#9;&#9;&#9;left: 0,&#10;&#9;&#9;&#9;&#9;&#9;&#9;right: 0,&#10;&#9;&#9;&#9;&#9;&#9;&#9;alignItems: 'center',&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Important: enable interactions for overlays in the portal.&#10;&#9;&#9;&#9;&#9;&#9;&#9;pointerEvents: 'auto',&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingVertical: 10,&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingHorizontal: 16,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderRadius: 10,&#10;&#9;&#9;&#9;&#9;&#9;&#9;backgroundColor: '#111827'&#10;&#9;&#9;&#9;&#9;&#9;}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;{toast}&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;)}&#10;&#9;&#9;&lt;/Portal&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;#### Example: anchored overlay/popover&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text, View, Pressable} from 'react-native';&#10;import {Portal} from 'react-native-cross-elements';&#10;&#10;export function PopoverDemo() {&#10;&#9;const [visible, setVisible] = React.useState(false);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{padding: 24}}&gt;&#10;&#9;&#9;&#9;&lt;Pressable onPress={() =&gt; setVisible((v) =&gt; !v)}&gt;&#10;&#9;&#9;&#9;&#9;&lt;Text&gt;Toggle popover&lt;/Text&gt;&#10;&#9;&#9;&#9;&lt;/Pressable&gt;&#10;&#10;&#9;&#9;&#9;&lt;Portal&gt;&#10;&#9;&#9;&#9;&#9;{visible &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{position: 'absolute', top: 120, left: 24, pointerEvents: 'auto'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;View style={{padding: 8, backgroundColor: '#222', borderRadius: 8}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;I'm a popover&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&lt;/Portal&gt;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;#### Multiple hosts&#10;&#10;You can mount several hosts with different names and target them via the Portal's portalName.&#10;&#10;```tsx&#10;// Root&#10;&lt;PortalHost name=&quot;top_layer&quot;/&gt;&#10;&lt;PortalHost name=&quot;hud&quot;/&gt;&#10;&#10;// Later&#10;&lt;Portal portalName=&quot;hud&quot;&gt;{/* Heads-up messages */}&lt;/Portal&gt;&#10;```&#10;&#10;#### Notes&#10;&#10;- **Interactivity**: The host sets pointerEvents: 'none'. Give your top overlay container pointerEvents: 'auto' to&#10;  receive touches/clicks.&#10;- **Stacking**: Host uses zIndex 1000. You can stack additional layers inside using absolute positioning and zIndex.&#10;- **Fallbacks**: Some components (e.g., Dropdown) use Portal when a host is mounted; otherwise they fall back to a&#10;  modal.&#10;&#10;##  API and types reference&#10;&#10;Below are the key public types exported by the library. Use them for strong typing and better DX.&#10;&#10;### Interactables types&#10;&#10;#### AnimationConfig (for Switch, Dropdown, etc.)&#10;&#10;| Property     | Type           | Default | Description                      |&#10;|--------------|----------------|--------:|----------------------------------|&#10;| duration     | number         |       - | Duration of the animation in ms. |&#10;| easing       | EasingFunction |       - | Easing used for the transition.  |&#10;| reduceMotion | ReduceMotion   |       - | Reduce motion for accessibility. |&#10;&#10;#### PressableStyle&#10;&#10;- Either a style object for animated Pressable, or a function receiving Pressable state including `focused` and&#10;  returning the style. Useful for focus/press/hover visual states.&#10;&#10;#### LabeledInputProps&#10;&#10;| Property                | Type                                                                        |  Default | Description                                              |&#10;|-------------------------|-----------------------------------------------------------------------------|---------:|----------------------------------------------------------|&#10;| onChange                | (text: string) =&gt; void                                                      |        - | Called when the input text changes.                      |&#10;| style                   | LabelInputStyle \| (state: LabelInputState) =&gt; LabelInputStyle              |        - | Container style (layout properties).                     |&#10;| labelStyle              | {labelFilledOffset?, labelFilledFontSize?, labelFilledColor?, ...TextStyle} |        - | Label style and filled state props.                      |&#10;| textStyle               | TextStyle                                                                   |        - | Typography for label/placeholder (fontSize, color, etc.) |&#10;| className               | string                                                                      |        - | Container CSS class (web).                               |&#10;| inputConfig             | InputConfig                                                                 | required | Native TextInput props + classes.                        |&#10;| leftComponent           | ReactElement \| (state: LabelInputState) =&gt; ReactElement                    |        - | Optional leading icon.                                   |&#10;| rightComponent          | ReactElement \| (state: LabelInputState) =&gt; ReactElement                    |        - | Optional trailing icon.                                  |&#10;| textColor               | ColorValue                                                                  |        - | Text color (unfocused).                                  |&#10;| focusedTextColor        | ColorValue                                                                  |        - | Text color when focused.                                 |&#10;| backgroundColor         | ColorValue                                                                  |        - | Background color.                                        |&#10;| selectedBackgroundColor | ColorValue                                                                  |        - | Background when selected.                                |&#10;| pressedBackgroundColor  | ColorValue                                                                  |        - | Background when pressed.                                 |&#10;| focusOutline            | { type: 'border' &amp;#124; 'outline'; width: number }                          |        - | Focus indicator style.                                   |&#10;&#10;#### InputConfig (used by LabeledInputProps.inputConfig)&#10;&#10;| Property             | Type                                                                                                                   | Description                      |&#10;|----------------------|------------------------------------------------------------------------------------------------------------------------|----------------------------------|&#10;| className            | string                                                                                                                 | CSS class for the input (web).   |&#10;| placeholderClassName | string                                                                                                                 | CSS class for placeholder (web). |&#10;| ...TextInputProps    | All standard React Native TextInput props except style, onFocus, onBlur, onPointerEnter, onPointerLeave, onChangeText. |&#10;&#10;#### SelectDropdownProps&lt;T&gt;&#10;&#10;| Property                     | Type                                                            |  Default | Description                                             |&#10;|------------------------------|-----------------------------------------------------------------|---------:|---------------------------------------------------------|&#10;| data                         | T[]                                                             | required | Items to render in the dropdown.                        |&#10;| onSelect                     | (item: T, index: number) =&gt; void                                |        - | Called on item selection.                               |&#10;| onDropdownWillShow           | (willShow: boolean) =&gt; void                                     |        - | Called before opening/closing.                          |&#10;| defaultValue                 | T                                                               |        - | Pre-selected value.                                     |&#10;| defaultValueByIndex          | number                                                          |        - | Pre-selected index (zero-based).                        |&#10;| disabled                     | boolean                                                         |    false | Disable the entire dropdown.                            |&#10;| disabledIndexes              | number[]                                                        |        - | Disable specific rows.                                  |&#10;| disableAutoScroll            | boolean                                                         |    false | Prevent auto scroll to selection.                       |&#10;| testID                       | string                                                          |        - | Test id for the list.                                   |&#10;| onFocus / onBlur             | () =&gt; void                                                      |        - | Focus lifecycle callbacks.                              |&#10;| onScrollEndReached           | () =&gt; void                                                      |        - | Fired at end of list.                                   |&#10;| onChangeSearchInputText      | (text: string) =&gt; void                                          |        - | Use your own search handler (disables internal filter). |&#10;| dropDownSpacing              | number                                                          |        - | Space between trigger button and the dropdown window.   |&#10;| dropdownStyle                | ViewStyle                                                       |        - | Container style.                                        |&#10;| statusBarTranslucent         | boolean                                                         |        - | Show under Android status bar.                          |&#10;| dropdownOverlayColor         | string                                                          |        - | Backdrop color.                                         |&#10;| showsVerticalScrollIndicator | boolean                                                         |        - | Show vertical scroll bar.                               |&#10;| animateDropdown              | boolean                                                         |        - | Enable opening/closing animation.                       |&#10;| animationConfig              | AnimationConfig                                                 |        - | Timing config (if timing).                              |&#10;| springConfig                 | WithSpringConfig                                                |        - | Spring config (if spring).                              |&#10;| animationType                | 'spring' &amp;#124; 'timing'                                        | 'spring' | Choose animation driver.                                |&#10;| search                       | boolean                                                         |        - | Enable built-in search input.                           |&#10;| searchInputStyle             | ViewStyle                                                       |        - | Search container style.                                 |&#10;| searchInputTxtColor          | string                                                          |        - | Search input text color.                                |&#10;| searchInputTxtStyle          | ViewStyle                                                       |        - | Search input text style.                                |&#10;| searchPlaceHolder            | string                                                          |        - | Search placeholder text.                                |&#10;| searchPlaceHolderColor       | string                                                          |        - | Search placeholder color.                               |&#10;| renderSearchInputLeftIcon    | () =&gt; ReactElement                                              |        - | Left icon renderer.                                     |&#10;| renderSearchInputRightIcon   | () =&gt; ReactElement                                              |        - | Right icon renderer.                                    |&#10;| renderButton                 | ({ selectedItem, isVisible, disabled, onPress }) =&gt; JSX.Element |        - | Custom trigger button.                                  |&#10;| renderButtonContent          | (selectedItem, isVisible, focused) =&gt; JSX.Element               |        - | Custom content inside trigger.                          |&#10;| renderItemButton             | ({ item, index, isSelected, disabled, onPress }) =&gt; JSX.Element |        - | Custom item button.                                     |&#10;| renderItemContent            | (item, index, isSelected) =&gt; JSX.Element                        |        - | Custom item content.                                    |&#10;&#10;#### SelectDropdownRef&#10;&#10;| Method        | Signature               | Description                 |&#10;|---------------|-------------------------|-----------------------------|&#10;| reset         | () =&gt; void              | Clear selection and search. |&#10;| openDropdown  | () =&gt; void              | Open programmatically.      |&#10;| closeDropdown | () =&gt; void              | Close programmatically.     |&#10;| selectIndex   | (index: number) =&gt; void | Select item by index.       |&#10;&#10;### Navigation types&#10;&#10;#### FocusableViewProps&#10;&#10;| Property                           | Type                                                        | Description                                                                                                                            |&#10;|------------------------------------|-------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|&#10;| children                           | ReactElement or (state: FocusableNodeState) =&gt; ReactElement | Content or render-prop with node state.                                                                                                |&#10;| …ViewProps                         | React Native View props                                     | All View props except children.                                                                                                        |&#10;| …SpatialNavigationNodeDefaultProps | -                                                           | Focus handlers: onFocus, onBlur, onSelect, onLongSelect, onActive, onInactive; orientation, alignInGrid, indexRange, additionalOffset. |&#10;&#10;#### InnerFocusableViewProps (internal)&#10;&#10;- Same as FocusableViewProps plus a `nodeState` object injected by SpatialNavigationNode. Exposed here for completeness&#10;  but not typically used directly.&#10;&#10;#### SpatialNavigationNodeRef&#10;&#10;| Method | Signature  | Description                  |&#10;|--------|------------|------------------------------|&#10;| focus  | () =&gt; void | Imperatively focus the node. |&#10;&#10;#### SpatialNavigationVirtualizedListRef&#10;&#10;| Property/Method           | Signature               | Description              |&#10;|---------------------------|-------------------------|--------------------------|&#10;| focus                     | (index: number) =&gt; void | Focus item at index.     |&#10;| scrollTo                  | (index: number) =&gt; void | Scroll to item at index. |&#10;| currentlyFocusedItemIndex | number                  | Current focused index.   |&#10;&#10;#### SpatialNavigationVirtualizedGridRef&#10;&#10;- Alias of SpatialNavigationVirtualizedListRef.&#10;&#10;#### CustomScrollViewRef and CustomScrollViewProps&#10;&#10;| Name             | Type                           | Description              |&#10;|------------------|--------------------------------|--------------------------|&#10;| getInnerViewNode | () =&gt; any                      | Underlying node handle.  |&#10;| scrollTo         | ({ x?, y?, animated }) =&gt; void | Scroll programmatically. |&#10;&#10;CustomScrollViewProps (extends ScrollViewProps)&#10;&#10;| Property       | Type                                                                        | Description                           |&#10;|----------------|-----------------------------------------------------------------------------|---------------------------------------|&#10;| horizontal     | boolean                                                                     | Horizontal scroll.                    |&#10;| scrollDuration | number                                                                      | Duration for CSS-based scroll on web. |&#10;| onScroll       | (event: { nativeEvent: { contentOffset: { x: number; y: number }}}) =&gt; void | Scroll event handler.                 |&#10;&#10;#### NodeOrientation&#10;&#10;- 'horizontal' | 'vertical'&#10;&#10;#### TypeVirtualizedListAnimation&#10;&#10;| Signature                                                                      | Returns                               | Description                                  |&#10;|--------------------------------------------------------------------------------|---------------------------------------|----------------------------------------------|&#10;| ({ currentlyFocusedItemIndex, vertical?, scrollDuration, scrollOffsetsArray }) | Animated.WithAnimatedValue&lt;ViewStyle&gt; | Compute animated style for list transitions. |&#10;&#10;##  Contributing and license&#10;&#10;PRs and issues are welcome. See LICENSE for details (MIT).&#10;&#10;Author: ImRoodyDev (https://github.com/imroodydev)&#10;" />
              <option name="updatedContent" value="&lt;img width=&quot;3000&quot; height=&quot;1454&quot; alt=&quot;# react-native-cross-elements&quot;&#10;src=&quot;https://github.com/user-attachments/assets/9520856e-b059-4e1d-b5f9-0a3ef229700c&quot;/&gt;&#10;&#10;Beautiful, Web, Native and TV friendly interactable components and spatial navigation for React Native (iOS, Android,&#10;Web, TV) with accessibility for voice and screen reader support.&#10;&#10;[![npm version](https://img.shields.io/npm/v/react-native-cross-elements.svg?style=for-the-badge)](https://www.npmjs.com/package/react-native-cross-elements)&#10;[![npm downloads](https://img.shields.io/npm/dm/react-native-cross-elements.svg?style=for-the-badge&amp;color=blue)](https://www.npmjs.com/package/react-native-cross-elements)&#10;![TypeScript](https://img.shields.io/badge/TypeScript-Ready-3178C6?style=for-the-badge&amp;logo=typescript&amp;logoColor=white)&#10;![Reanimated](https://img.shields.io/badge/Reanimated-%E2%89%A53.0-000?style=for-the-badge)&#10;&#10;---&#10;&#10;## ✨ Features&#10;&#10;- Cross Platform Ready interactable UI: Buttons (native/custom), Switch, Dropdown, FlatLabelInput, Ripple, Portal.&#10;- Spatial navigation primitives: Root, Focusable views, ScrollView, Virtualized List/Grid, hooks, and refs.&#10;- Cross-platform pointer/remote support powered by @bam.tech/lrud for LRUD navigation and React Native Reanimated for&#10;  silky animations.&#10;&#10;## ️ Table of contents&#10;&#10;- Installation&#10;- Requirements&#10;- Quick start&#10;- Spatial navigation overview&#10;- Components&#10;- Usage snippets&#10;- API and types reference&#10;- Recipes&#10;- Contributing and license&#10;&#10;##  Installation&#10;&#10;1) Install the package and required peers&#10;&#10;```bash&#10;# with npm&#10;npm i react-native-cross-elements&#10;&#10;# or yarn&#10;yarn add react-native-cross-elements&#10;```&#10;&#10;#### 2) Configure Reanimated (v3.0+)&#10;&#10;Follow the official Reanimated installation guide for your RN version:&#10;&#10;- React Native Reanimated docs: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/&#10;&#10;Typical steps include:&#10;&#10;- Add 'react-native-reanimated/plugin' as the last plugin in babel.config.js.&#10;- Enable Hermes (recommended).&#10;- Rebuild the native app after installing.&#10;&#10;#### 3) iOS/Android native rebuild&#10;&#10;After installation and Babel config, fully rebuild the app (npx pod-install &amp;&amp; run).&#10;&#10;## ⚙️ Requirements&#10;&#10;- react-native&#10;- react&#10;- react-native-reanimated &gt;= 3.0.0 (installation&#10;  guide: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started#installation)&#10;&#10;##  Components&#10;&#10;- Buttons&#10;    - NativeButton, CustomButton, BaseButton&#10;    - ButtonsSlider, AutoDetectButtonsSlider&#10;    - Switch&#10;- Inputs&#10;    - FlatLabelInput, LabeledInputFieldWeb&#10;    - Dropdown&#10;- Effects &amp; Portal&#10;    - Ripple, Portal, PortalHost&#10;- Navigation primitives&#10;    - SpatialNavigationRoot, SpatialNavigationView, SpatialNavigationScrollView&#10;    - SpatialNavigationFocusableView, SpatialNavigationNode&#10;    - SpatialNavigationVirtualizedList, SpatialNavigationVirtualizedGrid&#10;    - DefaultFocus, DeviceType provider, hooks&#10;&#10;## ⚡ Setup Spatial Navigation&#10;&#10;&lt;span style=&quot;color:green&quot;&gt;This setup is optional if you want to use spatial navigation (TV, remote, keyboard).  &#10;Otherwise, no need to wrap your app in a SpatialNavigationRoot.&lt;/span&gt;&#10;&#10;Wrap your app in a SpatialNavigationRoot and use Focusable views and components. Pointer devices can auto-focus elements&#10;on hover; remote arrow keys navigate.&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text} from 'react-native';&#10;import {&#10;&#9;SpatialNavigationDeviceTypeProvider,&#10;&#9;SpatialNavigationRoot,&#10;&#9;SpatialNavigationFocusableView,&#10;&#9;SpatialNavigationView,&#10;&#9;SpatialNavigation,&#10;} from 'react-native-elements';&#10;&#10;export default function App() {&#10;&#9;// Optional: wire up keyboard/remote once&#10;&#9;React.useEffect(() =&gt; {&#10;&#9;&#9;SpatialNavigation.configureRemoteControl();&#10;&#9;}, []);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;SpatialNavigationDeviceTypeProvider&gt;&#10;&#9;&#9;&#9;&lt;SpatialNavigationRoot&gt;&#10;&#9;&#9;&#9;&#9;&lt;SpatialNavigationFocusableView style={{padding: 12, backgroundColor: '#222', borderRadius: 8}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;Focusable card&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&lt;/SpatialNavigationFocusableView&gt;&#10;&#9;&#9;&#9;&lt;/SpatialNavigationRoot&gt;&#10;&#9;&#9;&lt;/SpatialNavigationDeviceTypeProvider&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;##  Spatial navigation&#10;&#10;- Engine: LRUD navigation is powered by @bam.tech/lrud.&#10;- Root: SpatialNavigationRoot provides the navigation context and remote handling.&#10;- Focusable: SpatialNavigationFocusableView turns a View into a focusable node with proper accessibility props.&#10;- Views: SpatialNavigationView and SpatialNavigationScrollView help layout focusable children, with scrolling support.&#10;- Virtualized: SpatialNavigationVirtualizedList/Grid expose focus and scroll APIs via refs.&#10;- Events: onFocus, onBlur, onSelect, onLongSelect, onActive, onInactive handlers are available on focusable nodes.&#10;&#10;More in-depth spatial navigation concepts:&#10;&#10;- LRUD docs (BAM): https://github.com/bam-tech/lrud&#10;- React TV Space Navigation (Bamlab): https://github.com/bamlab/react-tv-space-navigation&#10;&#10;##  Usage snippets&#10;&#10;### Dropdown&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text, View} from 'react-native';&#10;import {Dropdown, type SelectDropdownProps, type SelectDropdownRef} from 'react-native-elements';&#10;&#10;const options = [&#10;&#9;{label: 'One', value: 1},&#10;&#9;{label: 'Two', value: 2},&#10;&#9;{label: 'Three', value: 3},&#10;&#9;{label: 'Four', value: 4},&#10;];&#10;&#10;export default function MyDropdown() {&#10;&#9;const ref = React.useRef&lt;SelectDropdownRef&gt;(null);&#10;&#10;&#9;const onSelect: SelectDropdownProps&lt;typeof options[number]&gt;['onSelect'] = (item, index) =&gt; {&#10;&#9;&#9;console.log('selected', {item, index});&#10;&#9;};&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{gap: 12}}&gt;&#10;&#9;&#9;&#9;&lt;Dropdown&#10;&#9;&#9;&#9;&#9;ref={ref}&#10;&#9;&#9;&#9;&#9;data={options}&#10;&#9;&#9;&#9;&#9;defaultValueByIndex={1}&#10;&#9;&#9;&#9;&#9;disabledIndexes={[2]}&#10;&#9;&#9;&#9;&#9;onSelect={onSelect}&#10;&#9;&#9;&#9;&#9;onDropdownWillShow={(willShow) =&gt; console.log('dropdown will show?', willShow)}&#10;&#9;&#9;&#9;&#9;// Animations&#10;&#9;&#9;&#9;&#9;animateDropdown&#10;&#9;&#9;&#9;&#9;animationType={'spring'}&#10;&#9;&#9;&#9;&#9;animationConfig={{duration: 280}}&#10;&#9;&#9;&#9;&#9;// Search&#10;&#9;&#9;&#9;&#9;search&#10;&#9;&#9;&#9;&#9;searchPlaceHolder=&quot;Search options...&quot;&#10;&#9;&#9;&#9;&#9;renderSearchInputLeftIcon={() =&gt; &lt;Text&gt;&lt;/Text&gt;}&#10;&#9;&#9;&#9;&#9;// Window &amp; overlay&#10;&#9;&#9;&#9;&#9;dropDownSpacing={8}&#10;&#9;&#9;&#9;&#9;dropdownOverlayColor=&quot;rgba(0,0,0,0.45)&quot;&#10;&#9;&#9;&#9;&#9;showsVerticalScrollIndicator={false}&#10;&#9;&#9;&#9;&#9;// Custom UI&#10;&#9;&#9;&#9;&#9;renderButtonContent={(selectedItem, isVisible, focused) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{padding: 12, borderRadius: 8, backgroundColor: focused ? '#222' : '#333'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{selectedItem ? selectedItem.label : 'Select an option'} {isVisible ? '▲' : '▼'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;renderItemContent={(item, index, isSelected) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{padding: 12, backgroundColor: isSelected ? '#222' : 'transparent'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;{index + 1}. {item.label}&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;/&gt;&#10;&#10;&#9;&#9;&#9;&lt;Text onPress={() =&gt; ref.current?.openDropdown()} style={{color: '#4EA8DE'}}&gt;Open programmatically&lt;/Text&gt;&#10;&#9;&#9;&#9;&lt;Text onPress={() =&gt; ref.current?.selectIndex(0)} style={{color: '#4EA8DE'}}&gt;Select first option&lt;/Text&gt;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;### Switch&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Switch} from 'react-native-cross-elements';&#10;&#10;export default function MySwitch() {&#10;&#9;const [on, setOn] = React.useState(false);&#10;&#9;return &lt;Switch value={on} onValueChange={setOn}/&gt;;&#10;}&#10;```&#10;&#10;### FlatLabelInput&#10;&#10;```tsx&#10;import React from 'react';&#10;import {FlatLabelInput} from 'react-native-cross-elements';&#10;import {Text} from 'react-native';&#10;&#10;export default function MyInput() {&#10;&#9;const [text, setText] = React.useState('');&#10;&#9;const [focused, setFocused] = React.useState(false);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;FlatLabelInput&#10;&#9;&#9;&#9;onChange={setText}&#10;&#9;&#9;&#9;// Visuals&#10;&#9;&#9;&#9;textColor=&quot;#E5E7EB&quot;&#10;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;backgroundColor=&quot;#111827&quot;&#10;&#9;&#9;&#9;selectedBackgroundColor=&quot;#1F2937&quot;&#10;&#9;&#9;&#9;pressedBackgroundColor=&quot;#0B1220&quot;&#10;&#9;&#9;&#9;labelStyle={{&#10;&#9;&#9;&#9;&#9;labelFilledColor: '#9CA3AF',&#10;&#9;&#9;&#9;&#9;labelFilledFontSize: 12,&#10;&#9;&#9;&#9;&#9;color: '#9CA3AF',&#10;&#9;&#9;&#9;&#9;fontSize: 16,&#10;&#9;&#9;&#9;&#9;fontWeight: '600',&#10;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;inputConfig={{&#10;&#9;&#9;&#9;&#9;placeholder: 'Email',&#10;&#9;&#9;&#9;&#9;inputMode: 'email',&#10;&#9;&#9;&#9;&#9;maxLength: 120,&#10;&#9;&#9;&#9;&#9;autoFocus: false,&#10;&#9;&#9;&#9;&#9;secureTextEntry: false,&#10;&#9;&#9;&#9;&#9;onEndEditing: () =&gt; console.log('end editing'),&#10;&#9;&#9;&#9;&#9;className: 'my-input',&#10;&#9;&#9;&#9;&#9;placeholderClassName: 'my-input-placeholder',&#10;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;leftComponent={(state) =&gt; (&#10;&#9;&#9;&#9;&#9;&lt;Text style={{marginRight: 8}}&gt;{state.focused ? '✉️' : ''}&lt;/Text&gt;&#10;&#9;&#9;&#9;)}&#10;&#9;&#9;/&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;### Buttons (Base, Native, Custom, Sliders)&#10;&#10;```tsx&#10;import React from 'react';&#10;import {&#10;&#9;BaseButton,&#10;&#9;NativeButton,&#10;&#9;CustomButton,&#10;&#9;ButtonSlider,&#10;&#9;AutoDetectButtonsSlider,&#10;} from 'react-native-cross-elements';&#10;import {Text, View} from 'react-native';&#10;&#10;export default function ButtonsShowcase() {&#10;&#9;const [choice, setChoice] = React.useState(0);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{gap: 16}}&gt;&#10;&#9;&#9;&#9;{/* BaseButton: full control with render-prop */}&#10;&#9;&#9;&#9;&lt;BaseButton&#10;&#9;&#9;&#9;&#9;enableRipple&#10;&#9;&#9;&#9;&#9;rippleDuration={350}&#10;&#9;&#9;&#9;&#9;pressedScale={0.96}&#10;&#9;&#9;&#9;&#9;backgroundColor=&quot;#111827&quot;&#10;&#9;&#9;&#9;&#9;selectedBackgroundColor=&quot;#1F2937&quot;&#10;&#9;&#9;&#9;&#9;pressedBackgroundColor=&quot;#0B1220&quot;&#10;&#9;&#9;&#9;&#9;textColor=&quot;#E5E7EB&quot;&#10;&#9;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;&#9;animationConfig={{duration: 220}}&#10;&#9;&#9;&#9;&#9;style={({focused, pressed}) =&gt; ([&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingHorizontal: 16,&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingVertical: 12,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderRadius: 12,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderWidth: focused ? 2 : 1,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderColor: focused ? '#60A5FA' : 'transparent',&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;])}&#10;&#9;&#9;&#9;&#9;onPress={() =&gt; console.log('BaseButton pressed')}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;{({currentTextColor, isFocused}) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: currentTextColor}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{isFocused ? 'Focused' : 'Not focused'} BaseButton&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&lt;/BaseButton&gt;&#10;&#10;&#9;&#9;&#9;{/* NativeButton: text + optional icons + pending indicator */}&#10;&#9;&#9;&#9;&lt;NativeButton&#10;&#9;&#9;&#9;&#9;text=&quot;Continue&quot;&#10;&#9;&#9;&#9;&#9;onPress={async () =&gt; new Promise(r =&gt; setTimeout(r, 500))}&#10;&#9;&#9;&#9;&#9;showIndicator&#10;&#9;&#9;&#9;&#9;leftIconComponent={(color) =&gt; &lt;Text style={{color, marginRight: 8}}&gt;➡️&lt;/Text&gt;}&#10;&#9;&#9;&#9;&#9;rightIconComponent={(color) =&gt; &lt;Text style={{color, marginLeft: 8}}&gt;⏩&lt;/Text&gt;}&#10;&#9;&#9;&#9;&#9;backgroundColor=&quot;#0F766E&quot;&#10;&#9;&#9;&#9;&#9;selectedBackgroundColor=&quot;#115E59&quot;&#10;&#9;&#9;&#9;&#9;pressedBackgroundColor=&quot;#0D4D4A&quot;&#10;&#9;&#9;&#9;&#9;textColor=&quot;#ECFDF5&quot;&#10;&#9;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;&#9;style={{paddingHorizontal: 16, paddingVertical: 12, borderRadius: 12}}&#10;&#9;&#9;&#9;/&gt;&#10;&#10;&#9;&#9;&#9;{/* CustomButton: bring your own content with pending state */}&#10;&#9;&#9;&#9;&lt;CustomButton&#10;&#9;&#9;&#9;&#9;onPress={async () =&gt; new Promise(r =&gt; setTimeout(r, 400))}&#10;&#9;&#9;&#9;&#9;showIndicator&#10;&#9;&#9;&#9;&#9;backgroundColor=&quot;#1D4ED8&quot;&#10;&#9;&#9;&#9;&#9;selectedBackgroundColor=&quot;#1E40AF&quot;&#10;&#9;&#9;&#9;&#9;pressedBackgroundColor=&quot;#1C3D99&quot;&#10;&#9;&#9;&#9;&#9;textColor=&quot;#DBEAFE&quot;&#10;&#9;&#9;&#9;&#9;focusedTextColor=&quot;#FFFFFF&quot;&#10;&#9;&#9;&#9;&#9;style={{paddingHorizontal: 16, paddingVertical: 12, borderRadius: 12}}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;{({currentTextColor}) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{flexDirection: 'row', alignItems: 'center', gap: 8}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: currentTextColor}}&gt;Custom content&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: currentTextColor}}&gt;&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&lt;/CustomButton&gt;&#10;&#10;&#9;&#9;&#9;{/* ButtonSlider: fixed orientation */}&#10;&#9;&#9;&#9;&lt;ButtonSlider&#10;&#9;&#9;&#9;&#9;options={[&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;]}&#10;&#9;&#9;&#9;&#9;initialIndex={choice}&#10;&#9;&#9;&#9;&#9;onSelect={(i) =&gt; setChoice(i)}&#10;&#9;&#9;&#9;&#9;orientation=&quot;horizontal&quot;&#10;&#9;&#9;&#9;&#9;sliderContainerStyle={{backgroundColor: '#00000022', borderRadius: 9999, padding: 4}}&#10;&#9;&#9;&#9;&#9;sliderStyle={{backgroundColor: '#111827'}}&#10;&#9;&#9;&#9;&#9;sliderItemButtonStyle={({focused}) =&gt; ({&#10;&#9;&#9;&#9;&#9;&#9;backgroundColor: 'transparent',&#10;&#9;&#9;&#9;&#9;})}&#10;&#9;&#9;&#9;&#9;sliderItemTextStyle={({focused}) =&gt; ({&#10;&#9;&#9;&#9;&#9;&#9;color: focused ? '#111827' : '#111827',&#10;&#9;&#9;&#9;&#9;&#9;fontWeight: focused ? '700' : '500',&#10;&#9;&#9;&#9;&#9;})}&#10;&#9;&#9;&#9;&#9;textProps={{numberOfLines: 1}}&#10;&#9;&#9;&#9;&#9;style={{width: 420, height: 44}}&#10;&#9;&#9;&#9;/&gt;&#10;&#10;&#9;&#9;&#9;{/* AutoDetectButtonsSlider: auto horizontal/vertical based on container */}&#10;&#9;&#9;&#9;&lt;AutoDetectButtonsSlider&#10;&#9;&#9;&#9;&#9;options={[&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;]}&#10;&#9;&#9;&#9;&#9;initialIndex={0}&#10;&#9;&#9;&#9;&#9;onSelect={(i) =&gt; console.log('auto slider selected', i)}&#10;&#9;&#9;&#9;&#9;sliderContainerStyle={{backgroundColor: '#00000022', borderRadius: 9999, padding: 4}}&#10;&#9;&#9;&#9;&#9;sliderStyle={{backgroundColor: '#111827'}}&#10;&#9;&#9;&#9;&#9;sliderItemButtonStyle={{backgroundColor: 'transparent'}}&#10;&#9;&#9;&#9;&#9;sliderItemTextStyle={{color: '#111827', fontWeight: '600'}}&#10;&#9;&#9;&#9;&#9;textProps={{numberOfLines: 1}}&#10;&#9;&#9;&#9;&#9;style={{width: 420, height: 44}}&#10;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;### Portal &amp; PortalHost&#10;&#10;Use a PortalHost to render UI outside the normal view hierarchy. It's perfect for overlays that must escape clipping (&#10;overflow: hidden) or stack above everything (modals, dropdowns, tooltips, toasts).&#10;&#10;#### How it works&#10;&#10;- PortalHost subscribes to a central registry and renders any mounted portals into an absolute, top-layer container (&#10;  zIndex 1000, pointerEvents: 'none').&#10;- Portal registers its children into the named host on mount and removes them on unmount.&#10;- Components like Dropdown auto-detect a PortalHost; if none is mounted, they fall back to a native modal.&#10;&#10;#### Setup (root)&#10;&#10;```tsx&#10;import React from 'react';&#10;import {View} from 'react-native';&#10;import {PortalHost} from 'react-native-cross-elements';&#10;&#10;export default function RootLayout() {&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{flex: 1}}&gt;&#10;&#9;&#9;&#9;{/* Top-level host. Name is optional; default is 'root_ui_portal'. */}&#10;&#9;&#9;&#9;&lt;PortalHost/&gt;&#10;&#9;&#9;&#9;{/* Your app screens */}&#10;&#9;&#9;&#9;{/* &lt;AppNavigator /&gt; */}&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;#### Example: global toast&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text, View} from 'react-native';&#10;import {Portal} from 'react-native-cross-elements';&#10;&#10;export function ToastDemo() {&#10;&#9;const [toast, setToast] = React.useState&lt;string | null&gt;(null);&#10;&#10;&#9;React.useEffect(() =&gt; {&#10;&#9;&#9;const t = setInterval(() =&gt; setToast('Saved successfully ✅'), 5000);&#10;&#9;&#9;const c = setInterval(() =&gt; setToast(null), 6500);&#10;&#9;&#9;return () =&gt; {&#10;&#9;&#9;&#9;clearInterval(t);&#10;&#9;&#9;&#9;clearInterval(c);&#10;&#9;&#9;};&#10;&#9;}, []);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;Portal&gt;&#10;&#9;&#9;&#9;{toast &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&lt;View&#10;&#9;&#9;&#9;&#9;&#9;style={{&#10;&#9;&#9;&#9;&#9;&#9;&#9;position: 'absolute',&#10;&#9;&#9;&#9;&#9;&#9;&#9;bottom: 24,&#10;&#9;&#9;&#9;&#9;&#9;&#9;left: 0,&#10;&#9;&#9;&#9;&#9;&#9;&#9;right: 0,&#10;&#9;&#9;&#9;&#9;&#9;&#9;alignItems: 'center',&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Important: enable interactions for overlays in the portal.&#10;&#9;&#9;&#9;&#9;&#9;&#9;pointerEvents: 'auto',&#10;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingVertical: 10,&#10;&#9;&#9;&#9;&#9;&#9;&#9;paddingHorizontal: 16,&#10;&#9;&#9;&#9;&#9;&#9;&#9;borderRadius: 10,&#10;&#9;&#9;&#9;&#9;&#9;&#9;backgroundColor: '#111827'&#10;&#9;&#9;&#9;&#9;&#9;}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;{toast}&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;)}&#10;&#9;&#9;&lt;/Portal&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;#### Example: anchored overlay/popover&#10;&#10;```tsx&#10;import React from 'react';&#10;import {Text, View, Pressable} from 'react-native';&#10;import {Portal} from 'react-native-cross-elements';&#10;&#10;export function PopoverDemo() {&#10;&#9;const [visible, setVisible] = React.useState(false);&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;View style={{padding: 24}}&gt;&#10;&#9;&#9;&#9;&lt;Pressable onPress={() =&gt; setVisible((v) =&gt; !v)}&gt;&#10;&#9;&#9;&#9;&#9;&lt;Text&gt;Toggle popover&lt;/Text&gt;&#10;&#9;&#9;&#9;&lt;/Pressable&gt;&#10;&#10;&#9;&#9;&#9;&lt;Portal&gt;&#10;&#9;&#9;&#9;&#9;{visible &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&lt;View style={{position: 'absolute', top: 120, left: 24, pointerEvents: 'auto'}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;View style={{padding: 8, backgroundColor: '#222', borderRadius: 8}}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Text style={{color: 'white'}}&gt;I'm a popover&lt;/Text&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/View&gt;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&lt;/Portal&gt;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;}&#10;```&#10;&#10;#### Multiple hosts&#10;&#10;You can mount several hosts with different names and target them via the Portal's portalName.&#10;&#10;```tsx&#10;// Root&#10;&lt;PortalHost name=&quot;top_layer&quot;/&gt;&#10;&lt;PortalHost name=&quot;hud&quot;/&gt;&#10;&#10;// Later&#10;&lt;Portal portalName=&quot;hud&quot;&gt;{/* Heads-up messages */}&lt;/Portal&gt;&#10;```&#10;&#10;#### Notes&#10;&#10;- **Interactivity**: The host sets pointerEvents: 'none'. Give your top overlay container pointerEvents: 'auto' to&#10;  receive touches/clicks.&#10;- **Stacking**: Host uses zIndex 1000. You can stack additional layers inside using absolute positioning and zIndex.&#10;- **Fallbacks**: Some components (e.g., Dropdown) use Portal when a host is mounted; otherwise they fall back to a&#10;  modal.&#10;&#10;##  API and types reference&#10;&#10;Below are the key public types exported by the library. Use them for strong typing and better DX.&#10;&#10;### Interactables types&#10;&#10;#### AnimationConfig (for Switch, Dropdown, etc.)&#10;&#10;| Property     | Type           | Default | Description                      |&#10;|--------------|----------------|--------:|----------------------------------|&#10;| duration     | number         |       - | Duration of the animation in ms. |&#10;| easing       | EasingFunction |       - | Easing used for the transition.  |&#10;| reduceMotion | ReduceMotion   |       - | Reduce motion for accessibility. |&#10;&#10;#### PressableStyle&#10;&#10;- Either a style object for animated Pressable, or a function receiving Pressable state including `focused` and&#10;  returning the style. Useful for focus/press/hover visual states.&#10;&#10;#### BaseButtonProps&#10;&#10;| Property                | Type                                                                        |  Default | Description                                              |&#10;|-------------------------|-----------------------------------------------------------------------------|---------:|----------------------------------------------------------|&#10;| orientation             | 'horizontal' \| 'vertical'                                                  |        - | Orientation for spatial navigation.                      |&#10;| onPress                 | (event: GestureResponderEvent) =&gt; any                                       |        - | Called when a single tap gesture is detected.           |&#10;| enableRipple            | boolean                                                                     |    false | Enables ripple effect on press (Native and Web).        |&#10;| className               | string                                                                      |        - | Optional classname for styling (web compatibility).     |&#10;| children                | ReactNode \| ({currentTextColor, isFocused}) =&gt; ReactNode                   | required | Button content or render function with state.           |&#10;| pressedScale            | number                                                                      |        - | Scale value when the button is pressed.                 |&#10;| animationConfig         | AnimationConfig                                                             |        - | Animation configuration for button state transitions.   |&#10;| style                   | PressableStyle                                                              |        - | Custom style for the button.                            |&#10;| textColor               | ColorValue                                                                  |   'black' | Text color when not focused.                             |&#10;| focusedTextColor        | ColorValue                                                                  |   'black' | Text color when focused.                                 |&#10;| backgroundColor         | ColorValue                                                                  |   'white' | Button background color (default state).                |&#10;| selectedBackgroundColor | ColorValue                                                                  |   'white' | Background color when the button is selected/focused.   |&#10;| pressedBackgroundColor  | ColorValue                                                                  |   'white' | Background color when the button is pressed.            |&#10;| rippleColor             | ColorValue                                                                  |        - | RippleConfig color for the button press effect.         |&#10;| centerRipple            | boolean                                                                     |    false | If true, ripple starts at the center of the button.     |&#10;| rippleDuration          | number                                                                      |        - | Duration of the ripple animation in milliseconds.       |&#10;| ...PressableProps       | Omit&lt;PressableProps, 'onPress' \| 'children' \| 'style' \| 'className'&gt;     |        - | All other React Native Pressable props.                 |&#10;&#10;#### FlatInputProps&#10;&#10;| Property                | Type                                               | Default | Description                                              |&#10;|-------------------------|----------------------------------------------------|--------:|----------------------------------------------------------|&#10;| All LabeledInputProps except labelStyle | - | - | Inherits all except labelStyle. |&#10;| labelStyle              | {labelFilledOffset?, labelFilledFontSize?, labelFilledColor?, ...TextStyle} |       - | Label style and filled state props.                      |&#10;| inputStyle              | ViewStyle (partial)                                |       - | Style for the input view component.                      |&#10;&#10;#### SpatialNavigationNodeDefaultProps&#10;&#10;| Property        | Type                                               | Default     | Description                                              |&#10;|-----------------|----------------------------------------------------|------------:|----------------------------------------------------------|&#10;| orientation     | 'horizontal' \| 'vertical'                         | 'vertical'  | Orientation for spatial navigation direction.           |&#10;| onFocus         | () =&gt; void                                         |           - | Called when the node receives focus.                    |&#10;| onBlur          | () =&gt; void                                         |           - | Called when the node loses focus.                       |&#10;| onSelect        | () =&gt; void                                         |           - | Called when the node is selected/pressed.               |&#10;| onLongSelect    | () =&gt; void                                         |           - | Called when the node is long pressed.                   |&#10;| onActive        | () =&gt; void                                         |           - | Called when the node becomes active.                    |&#10;| onInactive      | () =&gt; void                                         |           - | Called when the node becomes inactive.                  |&#10;| alignInGrid     | boolean                                            |       false | Whether to align in grid layout.                        |&#10;| indexRange      | [number, number]                                   |           - | Index range for virtualized components.                 |&#10;| additionalOffset| number                                             |           - | Additional offset for spatial navigation calculations.   |&#10;&#10;#### LabeledInputProps&#10;&#10;| Property                | Type                                                                        |  Default | Description                                              |&#10;|-------------------------|-----------------------------------------------------------------------------|---------:|----------------------------------------------------------|&#10;| onChange                | (text: string) =&gt; void                                                      |        - | Called when the input text changes.                      |&#10;| style                   | LabelInputStyle \| (state: LabelInputState) =&gt; LabelInputStyle              |        - | Container style (layout properties).                     |&#10;| labelStyle              | {labelFilledOffset?, labelFilledFontSize?, labelFilledColor?, ...TextStyle} |        - | Label style and filled state props.                      |&#10;| textStyle               | TextStyle                                                                   |        - | Typography for label/placeholder (fontSize, color, etc.) |&#10;| className               | string                                                                      |        - | Container CSS class (web).                               |&#10;| inputConfig             | InputConfig                                                                 | required | Native TextInput props + classes.                        |&#10;| leftComponent           | ReactElement \| (state: LabelInputState) =&gt; ReactElement                    |        - | Optional leading icon.                                   |&#10;| rightComponent          | ReactElement \| (state: LabelInputState) =&gt; ReactElement                    |        - | Optional trailing icon.                                  |&#10;| textColor               | ColorValue                                                                  |        - | Text color (unfocused).                                  |&#10;| focusedTextColor        | ColorValue                                                                  |        - | Text color when focused.                                 |&#10;| backgroundColor         | ColorValue                                                                  |        - | Background color.                                        |&#10;| selectedBackgroundColor | ColorValue                                                                  |        - | Background when selected.                                |&#10;| pressedBackgroundColor  | ColorValue                                                                  |        - | Background when pressed.                                 |&#10;| focusOutline            | { type: 'border' &amp;#124; 'outline'; width: number }                          |        - | Focus indicator style.                                   |&#10;&#10;#### InputConfig (used by LabeledInputProps.inputConfig)&#10;&#10;| Property             | Type                                                                                                                   | Description                      |&#10;|----------------------|------------------------------------------------------------------------------------------------------------------------|----------------------------------|&#10;| className            | string                                                                                                                 | CSS class for the input (web).   |&#10;| placeholderClassName | string                                                                                                                 | CSS class for placeholder (web). |&#10;| ...TextInputProps    | All standard React Native TextInput props except style, onFocus, onBlur, onPointerEnter, onPointerLeave, onChangeText. |&#10;&#10;#### SelectDropdownProps&lt;T&gt;&#10;&#10;| Property                     | Type                                                            |  Default | Description                                             |&#10;|------------------------------|-----------------------------------------------------------------|---------:|---------------------------------------------------------|&#10;| data                         | T[]                                                             | required | Items to render in the dropdown.                        |&#10;| onSelect                     | (item: T, index: number) =&gt; void                                |        - | Called on item selection.                               |&#10;| onDropdownWillShow           | (willShow: boolean) =&gt; void                                     |        - | Called before opening/closing.                          |&#10;| defaultValue                 | T                                                               |        - | Pre-selected value.                                     |&#10;| defaultValueByIndex          | number                                                          |        - | Pre-selected index (zero-based).                        |&#10;| disabled                     | boolean                                                         |    false | Disable the entire dropdown.                            |&#10;| disabledIndexes              | number[]                                                        |        - | Disable specific rows.                                  |&#10;| disableAutoScroll            | boolean                                                         |    false | Prevent auto scroll to selection.                       |&#10;| testID                       | string                                                          |        - | Test id for the list.                                   |&#10;| onFocus / onBlur             | () =&gt; void                                                      |        - | Focus lifecycle callbacks.                              |&#10;| onScrollEndReached           | () =&gt; void                                                      |        - | Fired at end of list.                                   |&#10;| onChangeSearchInputText      | (text: string) =&gt; void                                          |        - | Use your own search handler (disables internal filter). |&#10;| dropDownSpacing              | number                                                          |        - | Space between trigger button and the dropdown window.   |&#10;| dropdownStyle                | ViewStyle                                                       |        - | Container style.                                        |&#10;| statusBarTranslucent         | boolean                                                         |        - | Show under Android status bar.                          |&#10;| dropdownOverlayColor         | string                                                          |        - | Backdrop color.                                         |&#10;| showsVerticalScrollIndicator | boolean                                                         |        - | Show vertical scroll bar.                               |&#10;| animateDropdown              | boolean                                                         |        - | Enable opening/closing animation.                       |&#10;| animationConfig              | AnimationConfig                                                 |        - | Timing config (if timing).                              |&#10;| springConfig                 | WithSpringConfig                                                |        - | Spring config (if spring).                              |&#10;| animationType                | 'spring' &amp;#124; 'timing'                                        | 'spring' | Choose animation driver.                                |&#10;| search                       | boolean                                                         |        - | Enable built-in search input.                           |&#10;| searchInputStyle             | ViewStyle                                                       |        - | Search container style.                                 |&#10;| searchInputTxtColor          | string                                                          |        - | Search input text color.                                |&#10;| searchInputTxtStyle          | ViewStyle                                                       |        - | Search input text style.                                |&#10;| searchPlaceHolder            | string                                                          |        - | Search placeholder text.                                |&#10;| searchPlaceHolderColor       | string                                                          |        - | Search placeholder color.                               |&#10;| renderSearchInputLeftIcon    | () =&gt; ReactElement                                              |        - | Left icon renderer.                                     |&#10;| renderSearchInputRightIcon   | () =&gt; ReactElement                                              |        - | Right icon renderer.                                    |&#10;| renderButton                 | ({ selectedItem, isVisible, disabled, onPress }) =&gt; JSX.Element |        - | Custom trigger button.                                  |&#10;| renderButtonContent          | (selectedItem, isVisible, focused) =&gt; JSX.Element               |        - | Custom content inside trigger.                          |&#10;| renderItemButton             | ({ item, index, isSelected, disabled, onPress }) =&gt; JSX.Element |        - | Custom item button.                                     |&#10;| renderItemContent            | (item, index, isSelected) =&gt; JSX.Element                        |        - | Custom item content.                                    |&#10;&#10;#### SelectDropdownRef&#10;&#10;| Method        | Signature               | Description                 |&#10;|---------------|-------------------------|-----------------------------|&#10;| reset         | () =&gt; void              | Clear selection and search. |&#10;| openDropdown  | () =&gt; void              | Open programmatically.      |&#10;| closeDropdown | () =&gt; void              | Close programmatically.     |&#10;| selectIndex   | (index: number) =&gt; void | Select item by index.       |&#10;&#10;### Navigation types&#10;&#10;#### FocusableViewProps&#10;&#10;| Property                           | Type                                                        | Description                                                                                                                            |&#10;|------------------------------------|-------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|&#10;| children                           | ReactElement or (state: FocusableNodeState) =&gt; ReactElement | Content or render-prop with node state.                                                                                                |&#10;| …ViewProps                         | React Native View props                                     | All View props except children.                                                                                                        |&#10;| …SpatialNavigationNodeDefaultProps | -                                                           | Focus handlers: onFocus, onBlur, onSelect, onLongSelect, onActive, onInactive; orientation, alignInGrid, indexRange, additionalOffset. |&#10;&#10;#### InnerFocusableViewProps (internal)&#10;&#10;- Same as FocusableViewProps plus a `nodeState` object injected by SpatialNavigationNode. Exposed here for completeness&#10;  but not typically used directly.&#10;&#10;#### SpatialNavigationNodeRef&#10;&#10;| Method | Signature  | Description                  |&#10;|--------|------------|------------------------------|&#10;| focus  | () =&gt; void | Imperatively focus the node. |&#10;&#10;#### SpatialNavigationVirtualizedListRef&#10;&#10;| Property/Method           | Signature               | Description              |&#10;|---------------------------|-------------------------|--------------------------|&#10;| focus                     | (index: number) =&gt; void | Focus item at index.     |&#10;| scrollTo                  | (index: number) =&gt; void | Scroll to item at index. |&#10;| currentlyFocusedItemIndex | number                  | Current focused index.   |&#10;&#10;#### SpatialNavigationVirtualizedGridRef&#10;&#10;- Alias of SpatialNavigationVirtualizedListRef.&#10;&#10;#### CustomScrollViewRef and CustomScrollViewProps&#10;&#10;| Name             | Type                           | Description              |&#10;|------------------|--------------------------------|--------------------------|&#10;| getInnerViewNode | () =&gt; any                      | Underlying node handle.  |&#10;| scrollTo         | ({ x?, y?, animated }) =&gt; void | Scroll programmatically. |&#10;&#10;CustomScrollViewProps (extends ScrollViewProps)&#10;&#10;| Property       | Type                                                                        | Description                           |&#10;|----------------|-----------------------------------------------------------------------------|---------------------------------------|&#10;| horizontal     | boolean                                                                     | Horizontal scroll.                    |&#10;| scrollDuration | number                                                                      | Duration for CSS-based scroll on web. |&#10;| onScroll       | (event: { nativeEvent: { contentOffset: { x: number; y: number }}}) =&gt; void | Scroll event handler.                 |&#10;&#10;#### NodeOrientation&#10;&#10;- 'horizontal' | 'vertical'&#10;&#10;#### TypeVirtualizedListAnimation&#10;&#10;| Signature                                                                      | Returns                               | Description                                  |&#10;|--------------------------------------------------------------------------------|---------------------------------------|----------------------------------------------|&#10;| ({ currentlyFocusedItemIndex, vertical?, scrollDuration, scrollOffsetsArray }) | Animated.WithAnimatedValue&lt;ViewStyle&gt; | Compute animated style for list transitions. |&#10;&#10;##  Contributing and license&#10;&#10;PRs and issues are welcome. See LICENSE for details (MIT).&#10;&#10;Author: ImRoodyDev (https://github.com/imroodydev)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>